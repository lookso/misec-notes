#!/bin/bash
# a.输入和输出
# 在linux中一切皆是文件,所以硬件也可以表示为文件
# 0 -标准输入 键盘:从文件(默认是键盘)读取 :<
# 1 -标准输出 屏幕:发送文件到文件(默认是屏幕) :>
# 2 -标准错误 屏幕:发送所有错误文件到一个文件(默认是屏幕) :2>
# 上述的3个数字称为文件描述符
# 标准输入:
# a1.操作符"<" 是输入重定向操作符,语法如下
# $command <input_filename
# 也可以这样在屏幕显示文件内容
cat <exec.php
#利用标准输入进行排序如下:
sort <px.txt
#  23
#  23
#  32
#  56
#  bbc
#  cba
#  nba
# 使用tr命令从os.txt文件中获取输入，然后将命令输出给sort或者uniq
tr a-z A-Z <os.txt|sort|uniq -c

#a2.标准输出,操作符">" 是输入重定向操作符
ls 
#把ls命令输出的内容写到px文件中了,如果px文件不存在,则自动创建
ls> px

# cat px
# exec.php
# px
# read.sh
# shell
# a3.标准错误,2>是标准错误重定向操作符,将运行时候错误的信息输入到error_filename文件中
# $command 2>error_filename
# a4.双向重定向>>
# >  是会清空掉之前的整个文件的内容
# >> 不会清空文件之前的内容,以内容追加的形式记录信息
#实例demo:

#如果参数个数小于1就退出,不然在屏幕上输出所有的参数信息
if [ $# -lt 1 ]; then
# 打印脚本的使用方法信息
  echo "$0"
#退出脚本
  exit
else
  echo $@
fi

# bash-3.2$ echo 23 >>cat.sh
# bash-3.2$ echo 2345 >>cat.sh
# bash-3.2$ cat cat.sh
# 23
# 2345

#标准错误重定向 2>
#将错误信息保存到kk文件中了
find / -name "kkkk" 2>kk

#标准输入重定向>
#将uname -a的信息写入到文件hostinfo文件中
uname -a >hotsinfo

#标准错误和标准输入同时重定向
#commnd &> filename
#command >& filename
#command > filename 2>&1

Shell中可能经常能看到：>/dev/null 2>&1
命令的结果可以通过>的形式来定义输出
分解这个组合：“>/dev/null 2>&1” 为五部分。
1：> 代表重定向到哪里，例如：echo "123" > /home/123.txt
2：/dev/null 代表空设备文件
3：2> 表示stderr标准错误
4：& 表示等同于的意思，2>&1，表示2的输出重定向等同于1
5：1 表示stdout标准输出，系统默认值是1，所以">/dev/null"等同于 "1>/dev/null"

因此，>/dev/null 2>&1
也可以写成“1> /dev/null 2>&1"
那么执行过程为：
1>/dev/null ：首先表示标准输出重定向到空设备文件，也就是不输出任何信息到终端，说白了就是不显示任何信息。
2>&1:接着,标准错误输出重定向到标准输出,因为之前标准输出已经重定向到了空设备文件，所以标准错误输出也重定向到空设备文件。

最常用的方式有:
1.command >file 2>file 与command >file 2>&1它们有什么不同的地方吗?
首先command > file 2>file 的意思是将命令所产生的标准输出信息,和错误的输出信息送到file中,command >file 2>file这样的写法,
stdout和stderr都直接送到file中,file会被打开两次,这样stdout和stderr会互相覆盖,这样写相当使用了FD1和FD2两个同时去抢占file 的管道。
而command >file 2>&1 这条命令就将stdout直接送向file, stderr 继承了FD1管道后,再被送往file,此时,file 只被打开了一次,也只使用了一个管道FD1,它包括了stdout和stderr的内容。
从IO效率上,前一条命令的效率要比后面一条的命令效率要低,所以在编写shell脚本的时候,较多的时候我们会command > file 2>&1 这样的写法。

2.>/dev/null 2>&1和2>&1 >/dev/null 的区别？
默认情况下，总是有三个文件处于打开状态，标准输入(键盘输入)、标准输出（输出到屏幕）、标准错误（也是输出到屏幕），它们分别对应的文件描述符是0，1，2 。
那么我们来看看下面的几种重定向方法的区别：
>/dev/null 2>&1
实际上,应该等同于这样:1>/dev/null 2>/dev/null,默认情况下就是1,标准输出，所以一般都省略。
而&符号，后面接的是必须的文件描述符。不能写成2>1，这样就成了标准错误重定向到文件名为1的文件中了,而不是重定向标准错误到标准输出中。
所以这里就是:标准输出重定向到了/dev/null，而标准错误又重定向到了标准输出，所以就成了标准输出和标准错误都重定向到了/dev/null

而 2>&1 >/dev/null
咋一看，这个跟上面那个有啥区别呢，不也是标准错误重定向到标准输出，而标准输出重定向到/dev/null么？
所以最终结果将是：标准错误打印到屏幕，而标准输出不打印到屏幕。
事实上, 命令行的重定向什么的, 是在执行命令之前就准备好了的.
解释顺序从左至右依次进行, 2&>1 ,而1是屏幕,所以标准错误重定向到屏幕, 再而1>/dev/null,即标准输出重定向到/dev/null, 上述2>&1 >/dev/null  并不是什么同一时刻要么产生标准输出要么产生标准错误.
而是两个不同的东西.以下变量的方式做个解释，就很明显了，这两种方式是不同的，前者就像：
a=1
b=a
而后者就像：
b=a
a=1
&>/dev/null
这个就是,不管你是啥玩意儿文件描述符，通通重定向到/dev/null

也就是说:
2>&1 >/dev/null 会将标准错误打印到屏幕
>/dev/null 2>&1 屏幕上没输出

tenludemac ‹master› »  pd 2>&1 >/dev/null
zsh: command not found: pd
下面的操作屏幕上并没有输出
tenludemac ‹master› »pd >/dev/null 2>&1

